## K Nearest Neighbors 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
 
#Data
knn = pd.read_csv('C:\\Users\\Kieu\\Python-Data-Science-and-Machine-Learning-Bootcamp\\Python-Data-Science-and-Machine-Learning-Bootcamp\\Machine Learning Sections\\K-Nearest-Neighbors\\KNN_Project_Data',index_col=0)

knn.head()

knn.describe()

knn.info()

#Data Analysis
sns.pairplot(knn,hue='TARGET CLASS')

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(knn.drop('TARGET CLASS',axis=1))

scaled_features = scaler.transform(knn.drop('TARGET CLASS',axis=1))

knn_feat = pd.DataFrame(scaled_features,columns=knn.columns[:-1])

knn_feat.head()

#Training Model
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test= train_test_split(scaled_features,knn['Target Class'],test_size=.3)

from sklearn.neighbors import KNeighborsClassifier

knns = KNeighborsClassifier(n_neighbors=1)

knn.fit(x_train,y_train)

#Prediction
pred = knn.predict(x_test)

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,pred))

error_rate = []

#Choosing K value
for i in range(1,40):
    
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train,y_train)
    pred_i = knn.predict(x_test)
    error_rate.append(np.mean(pred_i != y_test))
    
plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

# FIRST A QUICK COMPARISON TO OUR ORIGINAL K=1
knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(x_train,y_train)
pred = knn.predict(x_test)

print('WITH K=1')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))    

knn = KNeighborsClassifier(n_neighbors=23)

knn.fit(x_train,y_train)
pred = knn.predict(x_test)

print('WITH K=23')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred)) 
